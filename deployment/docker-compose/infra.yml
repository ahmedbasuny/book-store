name: 'book-store'
services:
  catalog-service:
    image: ahmedbasuny/bookstore-catalog-service
    container_name: catalog-service
    environment:
      DB_HOST: catalog-db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    ports:
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      catalog-db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m

  order-service:
    image: ahmedbasuny/bookstore-order-service
    container_name: order-service
    environment:
      DB_HOST: order-db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbitmq
      RABBITMQ_PASSWORD: rabbitmq
      CATALOG_SERVICE_URL: http://api-gateway:8989/catalog
      OAUTH2_SERVER_URL: http://keycloak:9191/realms/bookstore
    ports:
      - "8082:8082"
    restart: unless-stopped
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m

  notification-service:
    image: ahmedbasuny/bookstore-notification-service
    container_name: notification-service
    environment:
      DB_HOST: notification-db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbitmq
      RABBITMQ_PASSWORD: rabbitmq
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
    ports:
      - "8083:8083"
    restart: unless-stopped
    depends_on:
      notification-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m

  api-gateway:
    image: ahmedbasuny/bookstore-api-gateway
    container_name: api-gateway
    environment:
      - CATALOG_SERVICE_URL=http://catalog-service:8081
      - ORDER_SERVICE_URL=http://order-service:8082
    #      - MANAGEMENT_TRACING_ENABLED=true
    #      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    ports:
      - "8989:8989"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 700m

  web-fe:
    image: ahmedbasuny/web-fe
    container_name: web-app
    ports:
      - "5200:80"
    restart: unless-stopped

  catalog-db:
    image: postgres:16-alpine
    container_name: catalog-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - catalog_db:/data/postgres
    ports:
      - "15432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m

  order-db:
    image: postgres:16-alpine
    container_name: order-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - order_db:/data/postgres
    ports:
      - "25432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m

  notification-db:
    image: postgres:16-alpine
    container_name: notification-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - notification_db:/data/postgres
    ports:
      - "35432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m

  rabbitmq:
    image: rabbitmq:3.12.11-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 500m

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    container_name: keycloak
    command: [ 'start-dev', '--import-realm', '--http-port=9191' ]
    hostname: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin12345
    ports:
      - "9191:9191"
    volumes:
    #      - keycloak:/opt/keycloak/data/import
      - ./realm-config:/opt/keycloak/data/import
    deploy:
      resources:
        limits:
          memory: 2gb
      # export realm
      # docker exec -it keycloak bash -c "cp -rp /opt/keycloak/data/h2 /tmp ; /opt/keycloak/bin/kc.sh export --dir /opt/keycloak/data/import --realm bookstore --db dev-file --db-url 'jdbc:h2:file:/tmp/h2/keycloakdb;NON_KEYWORDS=VALUE' --users realm_file"



  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  pgadmin:
    image: dpage/pgadmin4:8.12.0
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localhost.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./pgadmin_servers.json:/pgadmin4/servers.json
    ports:
      - '5050:5050'
    entrypoint:
      - "/bin/sh"
      - "-c"
      - |
        echo 'catalog-db:5432:*:postgres:postgres' > /tmp/pgpassfile && \
        echo 'order-db:5432:*:postgres:postgres' >> /tmp/pgpassfile && \
        echo 'notification-db:5432:*:postgres:postgres' >> /tmp/pgpassfile && \
        chmod 600 /tmp/pgpassfile && \
        /entrypoint.sh

  portainer: # admin123456789
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  catalog_db:
  order_db:
  notification_db:
  portainer_data:
  pgadmin:
#  keycloak:

